// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: dialogue.proto

package dialogue

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DialogueService_GetMessagesV1_FullMethodName = "/dialogue.DialogueService/GetMessagesV1"
	DialogueService_SendMessageV1_FullMethodName = "/dialogue.DialogueService/SendMessageV1"
)

// DialogueServiceClient is the client API for DialogueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DialogueServiceClient interface {
	GetMessagesV1(ctx context.Context, in *GetMessagesV1Request, opts ...grpc.CallOption) (*GetMessagesV1Response, error)
	SendMessageV1(ctx context.Context, in *SendMessageV1Request, opts ...grpc.CallOption) (*SendMessageV1Response, error)
}

type dialogueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDialogueServiceClient(cc grpc.ClientConnInterface) DialogueServiceClient {
	return &dialogueServiceClient{cc}
}

func (c *dialogueServiceClient) GetMessagesV1(ctx context.Context, in *GetMessagesV1Request, opts ...grpc.CallOption) (*GetMessagesV1Response, error) {
	out := new(GetMessagesV1Response)
	err := c.cc.Invoke(ctx, DialogueService_GetMessagesV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogueServiceClient) SendMessageV1(ctx context.Context, in *SendMessageV1Request, opts ...grpc.CallOption) (*SendMessageV1Response, error) {
	out := new(SendMessageV1Response)
	err := c.cc.Invoke(ctx, DialogueService_SendMessageV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DialogueServiceServer is the server API for DialogueService service.
// All implementations must embed UnimplementedDialogueServiceServer
// for forward compatibility
type DialogueServiceServer interface {
	GetMessagesV1(context.Context, *GetMessagesV1Request) (*GetMessagesV1Response, error)
	SendMessageV1(context.Context, *SendMessageV1Request) (*SendMessageV1Response, error)
	mustEmbedUnimplementedDialogueServiceServer()
}

// UnimplementedDialogueServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDialogueServiceServer struct {
}

func (UnimplementedDialogueServiceServer) GetMessagesV1(context.Context, *GetMessagesV1Request) (*GetMessagesV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessagesV1 not implemented")
}
func (UnimplementedDialogueServiceServer) SendMessageV1(context.Context, *SendMessageV1Request) (*SendMessageV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessageV1 not implemented")
}
func (UnimplementedDialogueServiceServer) mustEmbedUnimplementedDialogueServiceServer() {}

// UnsafeDialogueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DialogueServiceServer will
// result in compilation errors.
type UnsafeDialogueServiceServer interface {
	mustEmbedUnimplementedDialogueServiceServer()
}

func RegisterDialogueServiceServer(s grpc.ServiceRegistrar, srv DialogueServiceServer) {
	s.RegisterService(&DialogueService_ServiceDesc, srv)
}

func _DialogueService_GetMessagesV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagesV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogueServiceServer).GetMessagesV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DialogueService_GetMessagesV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogueServiceServer).GetMessagesV1(ctx, req.(*GetMessagesV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogueService_SendMessageV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogueServiceServer).SendMessageV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DialogueService_SendMessageV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogueServiceServer).SendMessageV1(ctx, req.(*SendMessageV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// DialogueService_ServiceDesc is the grpc.ServiceDesc for DialogueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DialogueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dialogue.DialogueService",
	HandlerType: (*DialogueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMessagesV1",
			Handler:    _DialogueService_GetMessagesV1_Handler,
		},
		{
			MethodName: "SendMessageV1",
			Handler:    _DialogueService_SendMessageV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dialogue.proto",
}
